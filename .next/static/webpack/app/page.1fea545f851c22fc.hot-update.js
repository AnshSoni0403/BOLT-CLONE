"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/globe-visualization.tsx":
/*!************************************************!*\
  !*** ./src/components/globe-visualization.tsx ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GlobeVisualization)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\nfunction GlobeVisualization() {\n    _s();\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [isInteracting, setIsInteracting] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const interactionRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        isMouseDown: false,\n        lastMouseX: 0,\n        lastMouseY: 0,\n        rotationSpeedX: 0.003,\n        rotationSpeedY: 0.001,\n        rotationX: 0,\n        rotationY: 0,\n        zoom: 1\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"GlobeVisualization.useEffect\": ()=>{\n            const canvas = canvasRef.current;\n            if (!canvas) return;\n            const ctx = canvas.getContext(\"2d\");\n            if (!ctx) return;\n            // Function to set canvas dimensions with higher resolution for retina displays\n            const setCanvasDimensions = {\n                \"GlobeVisualization.useEffect.setCanvasDimensions\": ()=>{\n                    const container = canvas.parentElement;\n                    if (container) {\n                        const devicePixelRatio = window.devicePixelRatio || 1;\n                        canvas.width = container.clientWidth * devicePixelRatio;\n                        canvas.height = container.clientHeight * devicePixelRatio;\n                        canvas.style.width = `${container.clientWidth}px`;\n                        canvas.style.height = `${container.clientHeight}px`;\n                        ctx.scale(devicePixelRatio, devicePixelRatio);\n                    }\n                }\n            }[\"GlobeVisualization.useEffect.setCanvasDimensions\"];\n            setCanvasDimensions();\n            window.addEventListener(\"resize\", setCanvasDimensions);\n            // Define connection points (major cities)\n            const points = [\n                {\n                    lat: 40.7128,\n                    lng: -74.006,\n                    name: \"New York\",\n                    size: 1.2\n                },\n                {\n                    lat: 51.5074,\n                    lng: -0.1278,\n                    name: \"London\",\n                    size: 1.2\n                },\n                {\n                    lat: 35.6762,\n                    lng: 139.6503,\n                    name: \"Tokyo\",\n                    size: 1.2\n                },\n                {\n                    lat: -33.8688,\n                    lng: 151.2093,\n                    name: \"Sydney\",\n                    size: 1\n                },\n                {\n                    lat: 37.7749,\n                    lng: -122.4194,\n                    name: \"San Francisco\",\n                    size: 1\n                },\n                {\n                    lat: 19.076,\n                    lng: 72.8777,\n                    name: \"Mumbai\",\n                    size: 1\n                },\n                {\n                    lat: -23.5505,\n                    lng: -46.6333,\n                    name: \"SÃ£o Paulo\",\n                    size: 1\n                },\n                {\n                    lat: 48.8566,\n                    lng: 2.3522,\n                    name: \"Paris\",\n                    size: 1\n                },\n                {\n                    lat: 55.7558,\n                    lng: 37.6173,\n                    name: \"Moscow\",\n                    size: 1\n                },\n                {\n                    lat: 31.2304,\n                    lng: 121.4737,\n                    name: \"Shanghai\",\n                    size: 1.1\n                },\n                {\n                    lat: -6.2088,\n                    lng: 106.8456,\n                    name: \"Jakarta\",\n                    size: 1\n                },\n                {\n                    lat: 28.6139,\n                    lng: 77.209,\n                    name: \"New Delhi\",\n                    size: 1\n                },\n                {\n                    lat: 25.2048,\n                    lng: 55.2708,\n                    name: \"Dubai\",\n                    size: 1\n                },\n                {\n                    lat: -34.6037,\n                    lng: -58.3816,\n                    name: \"Buenos Aires\",\n                    size: 1\n                },\n                {\n                    lat: 30.0444,\n                    lng: 31.2357,\n                    name: \"Cairo\",\n                    size: 1\n                },\n                {\n                    lat: 59.3293,\n                    lng: 18.0686,\n                    name: \"Stockholm\",\n                    size: 0.9\n                },\n                {\n                    lat: -1.2921,\n                    lng: 36.8219,\n                    name: \"Nairobi\",\n                    size: 0.9\n                },\n                {\n                    lat: 41.0082,\n                    lng: 28.9784,\n                    name: \"Istanbul\",\n                    size: 1\n                },\n                {\n                    lat: 1.3521,\n                    lng: 103.8198,\n                    name: \"Singapore\",\n                    size: 1\n                },\n                {\n                    lat: -26.2041,\n                    lng: 28.0473,\n                    name: \"Johannesburg\",\n                    size: 0.9\n                }\n            ];\n            // Create connection pairs (not all cities connect to all others)\n            const connections = [\n                [\n                    0,\n                    1\n                ],\n                [\n                    0,\n                    4\n                ],\n                [\n                    0,\n                    6\n                ],\n                [\n                    0,\n                    7\n                ],\n                [\n                    0,\n                    9\n                ],\n                [\n                    0,\n                    13\n                ],\n                [\n                    1,\n                    7\n                ],\n                [\n                    1,\n                    8\n                ],\n                [\n                    1,\n                    11\n                ],\n                [\n                    1,\n                    12\n                ],\n                [\n                    1,\n                    17\n                ],\n                [\n                    2,\n                    4\n                ],\n                [\n                    2,\n                    9\n                ],\n                [\n                    2,\n                    10\n                ],\n                [\n                    2,\n                    18\n                ],\n                [\n                    3,\n                    6\n                ],\n                [\n                    3,\n                    10\n                ],\n                [\n                    3,\n                    18\n                ],\n                [\n                    3,\n                    19\n                ],\n                [\n                    4,\n                    9\n                ],\n                [\n                    4,\n                    18\n                ],\n                [\n                    5,\n                    11\n                ],\n                [\n                    5,\n                    12\n                ],\n                [\n                    5,\n                    18\n                ],\n                [\n                    6,\n                    13\n                ],\n                [\n                    6,\n                    19\n                ],\n                [\n                    7,\n                    8\n                ],\n                [\n                    7,\n                    17\n                ],\n                [\n                    8,\n                    11\n                ],\n                [\n                    8,\n                    17\n                ],\n                [\n                    9,\n                    10\n                ],\n                [\n                    9,\n                    11\n                ],\n                [\n                    10,\n                    18\n                ],\n                [\n                    11,\n                    12\n                ],\n                [\n                    12,\n                    16\n                ],\n                [\n                    12,\n                    19\n                ],\n                [\n                    14,\n                    16\n                ],\n                [\n                    14,\n                    17\n                ],\n                [\n                    14,\n                    19\n                ],\n                [\n                    15,\n                    17\n                ],\n                [\n                    16,\n                    19\n                ]\n            ];\n            // Animation properties\n            const animationProps = {\n                time: 0,\n                pulseSpeed: 0.02,\n                connectionAnimations: connections.map({\n                    \"GlobeVisualization.useEffect\": ()=>({\n                            progress: Math.random(),\n                            speed: 0.002 + Math.random() * 0.003\n                        })\n                }[\"GlobeVisualization.useEffect\"]),\n                hoverPoint: null,\n                particleTime: 0\n            };\n            // Generate random particles around the globe\n            const numParticles = 150;\n            const particles = Array.from({\n                length: numParticles\n            }, {\n                \"GlobeVisualization.useEffect.particles\": ()=>({\n                        lat: Math.random() * 180 - 90,\n                        lng: Math.random() * 360 - 180,\n                        size: 0.2 + Math.random() * 0.5,\n                        speed: 0.1 + Math.random() * 0.3,\n                        offset: Math.random() * Math.PI * 2\n                    })\n            }[\"GlobeVisualization.useEffect.particles\"]);\n            // Function to convert latitude and longitude into 3D coordinates on the globe\n            const latLngTo3D = {\n                \"GlobeVisualization.useEffect.latLngTo3D\": (lat, lng, radius)=>{\n                    const phi = (90 - lat) * (Math.PI / 180);\n                    const theta = (lng + 180) * (Math.PI / 180);\n                    const x = -radius * Math.sin(phi) * Math.cos(theta);\n                    const y = radius * Math.cos(phi);\n                    const z = radius * Math.sin(phi) * Math.sin(theta);\n                    return {\n                        x,\n                        y,\n                        z\n                    };\n                }\n            }[\"GlobeVisualization.useEffect.latLngTo3D\"];\n            // Function to rotate a 3D point around the Y and X axes\n            const rotatePoint = {\n                \"GlobeVisualization.useEffect.rotatePoint\": (point, rotationX, rotationY)=>{\n                    // Rotate around Y axis\n                    const cosY = Math.cos(rotationY);\n                    const sinY = Math.sin(rotationY);\n                    const x1 = point.x * cosY - point.z * sinY;\n                    const z1 = point.z * cosY + point.x * sinY;\n                    // Rotate around X axis\n                    const cosX = Math.cos(rotationX);\n                    const sinX = Math.sin(rotationX);\n                    const y2 = point.y * cosX - z1 * sinX;\n                    const z2 = z1 * cosX + point.y * sinX;\n                    return {\n                        x: x1,\n                        y: y2,\n                        z: z2\n                    };\n                }\n            }[\"GlobeVisualization.useEffect.rotatePoint\"];\n            // Function to project a 3D point onto the 2D canvas\n            const project = {\n                \"GlobeVisualization.useEffect.project\": (point, centerX, centerY, zoom)=>{\n                    // Simple perspective projection\n                    const fov = 300;\n                    const viewZ = fov + point.z * zoom;\n                    const scale = fov / Math.max(1, viewZ);\n                    const x = centerX + point.x * scale * zoom;\n                    const y = centerY + point.y * scale * zoom;\n                    return {\n                        x,\n                        y,\n                        scale,\n                        depth: viewZ\n                    };\n                }\n            }[\"GlobeVisualization.useEffect.project\"];\n            // Function to draw a glowing circle\n            const drawGlowingCircle = {\n                \"GlobeVisualization.useEffect.drawGlowingCircle\": (x, y, radius, color, glowColor, glowSize)=>{\n                    // Draw outer glow\n                    const gradient = ctx.createRadialGradient(x, y, radius, x, y, radius + glowSize);\n                    gradient.addColorStop(0, glowColor);\n                    gradient.addColorStop(1, \"rgba(0, 0, 0, 0)\");\n                    ctx.fillStyle = gradient;\n                    ctx.beginPath();\n                    ctx.arc(x, y, radius + glowSize, 0, Math.PI * 2);\n                    ctx.fill();\n                    // Draw inner circle\n                    ctx.fillStyle = color;\n                    ctx.beginPath();\n                    ctx.arc(x, y, radius, 0, Math.PI * 2);\n                    ctx.fill();\n                }\n            }[\"GlobeVisualization.useEffect.drawGlowingCircle\"];\n            // Function to draw the globe and its grid, points, and connections\n            const drawGlobe = {\n                \"GlobeVisualization.useEffect.drawGlobe\": (timestamp)=>{\n                    if (!ctx || !canvas) return;\n                    const container = canvas.parentElement;\n                    if (!container) return;\n                    const width = container.clientWidth;\n                    const height = container.clientHeight;\n                    ctx.clearRect(0, 0, width, height);\n                    const centerX = width / 2;\n                    const centerY = height / 2;\n                    const baseRadius = Math.min(width, height) * 0.35;\n                    const radius = baseRadius * interactionRef.current.zoom;\n                    // Update rotation based on interaction or auto-rotation\n                    if (!interactionRef.current.isMouseDown) {\n                        interactionRef.current.rotationY += interactionRef.current.rotationSpeedY;\n                        interactionRef.current.rotationX += interactionRef.current.rotationSpeedX;\n                    }\n                    // Update animation time\n                    animationProps.time += 0.01;\n                    animationProps.particleTime += 0.005;\n                    // Draw the globe background (with gradient)\n                    const gradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, radius * 1.2);\n                    gradient.addColorStop(0, \"rgba(30, 64, 175, 0.2)\");\n                    gradient.addColorStop(0.5, \"rgba(30, 64, 175, 0.15)\");\n                    gradient.addColorStop(1, \"rgba(30, 64, 175, 0)\");\n                    ctx.beginPath();\n                    ctx.arc(centerX, centerY, radius * 1.2, 0, Math.PI * 2);\n                    ctx.fillStyle = gradient;\n                    ctx.fill();\n                    // Draw the globe outer glow\n                    const glowGradient = ctx.createRadialGradient(centerX, centerY, radius * 0.9, centerX, centerY, radius * 1.3);\n                    glowGradient.addColorStop(0, \"rgba(59, 130, 246, 0.2)\");\n                    glowGradient.addColorStop(1, \"rgba(59, 130, 246, 0)\");\n                    ctx.beginPath();\n                    ctx.arc(centerX, centerY, radius * 1.3, 0, Math.PI * 2);\n                    ctx.fillStyle = glowGradient;\n                    ctx.fill();\n                    // Draw the globe (circle with gradient)\n                    const sphereGradient = ctx.createRadialGradient(centerX - radius * 0.3, centerY - radius * 0.3, 0, centerX, centerY, radius);\n                    sphereGradient.addColorStop(0, \"rgba(59, 130, 246, 0.4)\");\n                    sphereGradient.addColorStop(0.7, \"rgba(30, 64, 175, 0.3)\");\n                    sphereGradient.addColorStop(1, \"rgba(30, 64, 175, 0.2)\");\n                    ctx.beginPath();\n                    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n                    ctx.fillStyle = sphereGradient;\n                    ctx.fill();\n                    ctx.beginPath();\n                    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n                    ctx.strokeStyle = \"rgba(59, 130, 246, 0.6)\";\n                    ctx.lineWidth = 2;\n                    ctx.stroke();\n                    // Store all projected points for later use\n                    const projectedPoints = [];\n                    // Calculate and store all projected points\n                    points.forEach({\n                        \"GlobeVisualization.useEffect.drawGlobe\": (point, index)=>{\n                            const { x, y, z } = latLngTo3D(point.lat, point.lng, radius);\n                            const rotated = rotatePoint({\n                                x,\n                                y,\n                                z\n                            }, interactionRef.current.rotationX, interactionRef.current.rotationY);\n                            const projected = project(rotated, centerX, centerY, interactionRef.current.zoom);\n                            projectedPoints.push({\n                                x: rotated.x,\n                                y: rotated.y,\n                                z: rotated.z,\n                                projX: projected.x,\n                                projY: projected.y,\n                                scale: projected.scale,\n                                depth: projected.depth,\n                                index,\n                                size: point.size || 1\n                            });\n                        }\n                    }[\"GlobeVisualization.useEffect.drawGlobe\"]);\n                    // Sort points by z-depth for proper rendering\n                    projectedPoints.sort({\n                        \"GlobeVisualization.useEffect.drawGlobe\": (a, b)=>a.z - b.z\n                    }[\"GlobeVisualization.useEffect.drawGlobe\"]);\n                    // Draw grid lines (latitude and longitude)\n                    const numLatLines = 10;\n                    const numLngLines = 18;\n                    // Draw longitude lines (vertical)\n                    for(let i = 0; i < numLngLines; i++){\n                        const lng = i / numLngLines * 360 - 180;\n                        const points = [];\n                        for(let lat = -90; lat <= 90; lat += 5){\n                            const { x, y, z } = latLngTo3D(lat, lng, radius);\n                            const rotated = rotatePoint({\n                                x,\n                                y,\n                                z\n                            }, interactionRef.current.rotationX, interactionRef.current.rotationY);\n                            if (rotated.z < 0) {\n                                // Only draw points on the front hemisphere\n                                const projected = project(rotated, centerX, centerY, interactionRef.current.zoom);\n                                points.push(projected);\n                            }\n                        }\n                        if (points.length > 1) {\n                            ctx.beginPath();\n                            ctx.moveTo(points[0].x, points[0].y);\n                            for(let j = 1; j < points.length; j++){\n                                ctx.lineTo(points[j].x, points[j].y);\n                            }\n                            ctx.strokeStyle = \"rgba(59, 130, 246, 0.2)\";\n                            ctx.lineWidth = 1;\n                            ctx.stroke();\n                        }\n                    }\n                    // Draw latitude lines (horizontal)\n                    for(let i = 1; i < numLatLines; i++){\n                        const lat = i / numLatLines * 180 - 90;\n                        const points = [];\n                        for(let lng = -180; lng <= 180; lng += 5){\n                            const { x, y, z } = latLngTo3D(lat, lng, radius);\n                            const rotated = rotatePoint({\n                                x,\n                                y,\n                                z\n                            }, interactionRef.current.rotationX, interactionRef.current.rotationY);\n                            if (rotated.z < 0) {\n                                // Only draw points on the front hemisphere\n                                const projected = project(rotated, centerX, centerY, interactionRef.current.zoom);\n                                points.push(projected);\n                            }\n                        }\n                        if (points.length > 1) {\n                            ctx.beginPath();\n                            ctx.moveTo(points[0].x, points[0].y);\n                            for(let j = 1; j < points.length; j++){\n                                ctx.lineTo(points[j].x, points[j].y);\n                            }\n                            ctx.strokeStyle = \"rgba(59, 130, 246, 0.2)\";\n                            ctx.lineWidth = 1;\n                            ctx.stroke();\n                        }\n                    }\n                    // Draw particles\n                    particles.forEach({\n                        \"GlobeVisualization.useEffect.drawGlobe\": (particle, i)=>{\n                            // Make particles move slowly around their position\n                            const offsetLng = particle.lng + Math.sin(animationProps.particleTime * particle.speed + particle.offset) * 5;\n                            const { x, y, z } = latLngTo3D(particle.lat, offsetLng, radius * 1.02);\n                            const rotated = rotatePoint({\n                                x,\n                                y,\n                                z\n                            }, interactionRef.current.rotationX, interactionRef.current.rotationY);\n                            if (rotated.z < 0) {\n                                // Only draw particles on the front hemisphere\n                                const projected = project(rotated, centerX, centerY, interactionRef.current.zoom);\n                                const particleSize = particle.size * projected.scale;\n                                // Fade particles based on their z position\n                                const opacity = 0.3 + 0.7 * (-rotated.z / radius);\n                                ctx.beginPath();\n                                ctx.arc(projected.x, projected.y, particleSize, 0, Math.PI * 2);\n                                ctx.fillStyle = `rgba(159, 220, 255, ${opacity})`;\n                                ctx.fill();\n                            }\n                        }\n                    }[\"GlobeVisualization.useEffect.drawGlobe\"]);\n                    // Draw connections between points\n                    connections.forEach({\n                        \"GlobeVisualization.useEffect.drawGlobe\": (connection, idx)=>{\n                            const pointA = projectedPoints.find({\n                                \"GlobeVisualization.useEffect.drawGlobe.pointA\": (p)=>p.index === connection[0]\n                            }[\"GlobeVisualization.useEffect.drawGlobe.pointA\"]);\n                            const pointB = projectedPoints.find({\n                                \"GlobeVisualization.useEffect.drawGlobe.pointB\": (p)=>p.index === connection[1]\n                            }[\"GlobeVisualization.useEffect.drawGlobe.pointB\"]);\n                            if (pointA && pointB && pointA.z < 0 && pointB.z < 0) {\n                                // Calculate animation progress for this connection\n                                const animation = animationProps.connectionAnimations[idx];\n                                animation.progress += animation.speed;\n                                if (animation.progress > 1) animation.progress = 0;\n                                // Draw the connection line\n                                ctx.beginPath();\n                                ctx.moveTo(pointA.projX, pointA.projY);\n                                ctx.lineTo(pointB.projX, pointB.projY);\n                                // Line opacity based on depth\n                                const avgDepth = (pointA.z + pointB.z) / 2;\n                                const depthFactor = Math.min(1, Math.max(0, -avgDepth / radius));\n                                const baseOpacity = 0.1 + 0.3 * depthFactor;\n                                ctx.strokeStyle = `rgba(79, 195, 247, ${baseOpacity})`;\n                                ctx.lineWidth = 1;\n                                ctx.stroke();\n                                // Draw animated pulse along the connection\n                                const pulsePos = animation.progress;\n                                const pulseX = pointA.projX + (pointB.projX - pointA.projX) * pulsePos;\n                                const pulseY = pointA.projY + (pointB.projY - pointA.projY) * pulsePos;\n                                ctx.beginPath();\n                                ctx.arc(pulseX, pulseY, 2, 0, Math.PI * 2);\n                                ctx.fillStyle = `rgba(79, 195, 247, ${0.7 * depthFactor})`;\n                                ctx.fill();\n                            }\n                        }\n                    }[\"GlobeVisualization.useEffect.drawGlobe\"]);\n                    // Draw points on the globe\n                    projectedPoints.forEach({\n                        \"GlobeVisualization.useEffect.drawGlobe\": (point)=>{\n                            if (point.z < 0) {\n                                // Only draw points on the front hemisphere\n                                const isHovered = animationProps.hoverPoint && animationProps.hoverPoint.index === point.index;\n                                // Calculate point size based on depth and hover state\n                                const baseSize = 3 * point.size;\n                                const sizeMultiplier = isHovered ? 1.5 : 1;\n                                const pointSize = baseSize * point.scale * sizeMultiplier;\n                                // Calculate opacity based on depth\n                                const depthFactor = Math.min(1, Math.max(0, -point.z / radius));\n                                const baseOpacity = 0.5 + 0.5 * depthFactor;\n                                // Pulse effect\n                                const pulseSize = isHovered ? 1.2 + 0.3 * Math.sin(animationProps.time * 5) : 1 + 0.1 * Math.sin(animationProps.time * 3);\n                                // Draw the point with glow effect\n                                drawGlowingCircle(point.projX, point.projY, pointSize * pulseSize, isHovered ? \"rgba(255, 255, 255, 0.9)\" : `rgba(79, 195, 247, ${baseOpacity})`, isHovered ? \"rgba(255, 255, 255, 0.4)\" : `rgba(79, 195, 247, ${baseOpacity * 0.5})`, pointSize * 2);\n                            }\n                        }\n                    }[\"GlobeVisualization.useEffect.drawGlobe\"]);\n                    // Draw equator with special highlight\n                    ctx.beginPath();\n                    const equatorPoints = [];\n                    for(let lng = -180; lng <= 180; lng += 5){\n                        const { x, y, z } = latLngTo3D(0, lng, radius);\n                        const rotated = rotatePoint({\n                            x,\n                            y,\n                            z\n                        }, interactionRef.current.rotationX, interactionRef.current.rotationY);\n                        if (rotated.z < 0) {\n                            // Only draw points on the front hemisphere\n                            const projected = project(rotated, centerX, centerY, interactionRef.current.zoom);\n                            equatorPoints.push(projected);\n                        }\n                    }\n                    if (equatorPoints.length > 1) {\n                        ctx.beginPath();\n                        ctx.moveTo(equatorPoints[0].x, equatorPoints[0].y);\n                        for(let j = 1; j < equatorPoints.length; j++){\n                            ctx.lineTo(equatorPoints[j].x, equatorPoints[j].y);\n                        }\n                        ctx.strokeStyle = \"rgba(79, 195, 247, 0.5)\";\n                        ctx.lineWidth = 1.5;\n                        ctx.stroke();\n                    }\n                    // Check if mouse is hovering over any point\n                    if (animationProps.hoverPoint) {\n                        const point = points[animationProps.hoverPoint.index];\n                        // Draw tooltip with city name\n                        ctx.font = \"14px Arial\";\n                        ctx.fillStyle = \"white\";\n                        ctx.textAlign = \"center\";\n                        ctx.fillText(point.name, animationProps.hoverPoint.x, animationProps.hoverPoint.y - 20);\n                    }\n                }\n            }[\"GlobeVisualization.useEffect.drawGlobe\"];\n            // Mouse event handlers\n            const handleMouseDown = {\n                \"GlobeVisualization.useEffect.handleMouseDown\": (e)=>{\n                    const rect = canvas.getBoundingClientRect();\n                    interactionRef.current.isMouseDown = true;\n                    interactionRef.current.lastMouseX = e.clientX - rect.left;\n                    interactionRef.current.lastMouseY = e.clientY - rect.top;\n                    setIsInteracting(true);\n                }\n            }[\"GlobeVisualization.useEffect.handleMouseDown\"];\n            const handleMouseMove = {\n                \"GlobeVisualization.useEffect.handleMouseMove\": (e)=>{\n                    const rect = canvas.getBoundingClientRect();\n                    const mouseX = e.clientX - rect.left;\n                    const mouseY = e.clientY - rect.top;\n                    // Check if mouse is hovering over any point\n                    const centerX = rect.width / 2;\n                    const centerY = rect.height / 2;\n                    const radius = Math.min(rect.width, rect.height) * 0.35 * interactionRef.current.zoom;\n                    let hoveredPoint = null;\n                    // Calculate all points' positions\n                    for(let i = 0; i < points.length; i++){\n                        const { x, y, z } = latLngTo3D(points[i].lat, points[i].lng, radius);\n                        const rotated = rotatePoint({\n                            x,\n                            y,\n                            z\n                        }, interactionRef.current.rotationX, interactionRef.current.rotationY);\n                        if (rotated.z < 0) {\n                            // Only check points on the front hemisphere\n                            const projected = project(rotated, centerX, centerY, interactionRef.current.zoom);\n                            const distance = Math.sqrt(Math.pow(mouseX - projected.x, 2) + Math.pow(mouseY - projected.y, 2));\n                            if (distance < 15) {\n                                hoveredPoint = {\n                                    x: projected.x,\n                                    y: projected.y,\n                                    index: i\n                                };\n                                break;\n                            }\n                        }\n                    }\n                    animationProps.hoverPoint = hoveredPoint;\n                    // Handle dragging for rotation\n                    if (interactionRef.current.isMouseDown) {\n                        const deltaX = mouseX - interactionRef.current.lastMouseX;\n                        const deltaY = mouseY - interactionRef.current.lastMouseY;\n                        interactionRef.current.rotationY += deltaX * 0.01;\n                        interactionRef.current.rotationX += deltaY * 0.01;\n                        interactionRef.current.lastMouseX = mouseX;\n                        interactionRef.current.lastMouseY = mouseY;\n                    }\n                }\n            }[\"GlobeVisualization.useEffect.handleMouseMove\"];\n            const handleMouseUp = {\n                \"GlobeVisualization.useEffect.handleMouseUp\": ()=>{\n                    interactionRef.current.isMouseDown = false;\n                    setIsInteracting(false);\n                }\n            }[\"GlobeVisualization.useEffect.handleMouseUp\"];\n            const handleMouseLeave = {\n                \"GlobeVisualization.useEffect.handleMouseLeave\": ()=>{\n                    interactionRef.current.isMouseDown = false;\n                    setIsInteracting(false);\n                }\n            }[\"GlobeVisualization.useEffect.handleMouseLeave\"];\n            const handleWheel = {\n                \"GlobeVisualization.useEffect.handleWheel\": (e)=>{\n                    e.preventDefault();\n                    // Adjust zoom level with mouse wheel\n                    const zoomDelta = e.deltaY * -0.001;\n                    interactionRef.current.zoom = Math.max(0.5, Math.min(2, interactionRef.current.zoom + zoomDelta));\n                }\n            }[\"GlobeVisualization.useEffect.handleWheel\"];\n            // Add event listeners\n            canvas.addEventListener(\"mousedown\", handleMouseDown);\n            canvas.addEventListener(\"mousemove\", handleMouseMove);\n            canvas.addEventListener(\"mouseup\", handleMouseUp);\n            canvas.addEventListener(\"mouseleave\", handleMouseLeave);\n            canvas.addEventListener(\"wheel\", handleWheel);\n            // Animation loop\n            let animationId;\n            const animate = {\n                \"GlobeVisualization.useEffect.animate\": (timestamp)=>{\n                    drawGlobe(timestamp);\n                    animationId = requestAnimationFrame(animate);\n                }\n            }[\"GlobeVisualization.useEffect.animate\"];\n            animationId = requestAnimationFrame(animate);\n            // Cleanup on component unmount\n            return ({\n                \"GlobeVisualization.useEffect\": ()=>{\n                    window.removeEventListener(\"resize\", setCanvasDimensions);\n                    canvas.removeEventListener(\"mousedown\", handleMouseDown);\n                    canvas.removeEventListener(\"mousemove\", handleMouseMove);\n                    canvas.removeEventListener(\"mouseup\", handleMouseUp);\n                    canvas.removeEventListener(\"mouseleave\", handleMouseLeave);\n                    canvas.removeEventListener(\"wheel\", handleWheel);\n                    cancelAnimationFrame(animationId);\n                }\n            })[\"GlobeVisualization.useEffect\"];\n        }\n    }[\"GlobeVisualization.useEffect\"], []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"canvas\", {\n        ref: canvasRef,\n        className: `globe-canvas w-full h-full block ${isInteracting ? \"shadow-[0_0_30px_rgba(59,130,246,0.5)]\" : \"\"}`\n    }, void 0, false, {\n        fileName: \"C:\\\\Data\\\\workspace\\\\React\\\\bolt\\\\src\\\\components\\\\globe-visualization.tsx\",\n        lineNumber: 595,\n        columnNumber: 5\n    }, this);\n}\n_s(GlobeVisualization, \"A4AtGc+OcW0TOIQEAiXff6ERHXc=\");\n_c = GlobeVisualization;\nvar _c;\n$RefreshReg$(_c, \"GlobeVisualization\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/globe-visualization.tsx\n"));

/***/ })

});